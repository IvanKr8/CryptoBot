import asyncio
import json
import websockets
from telegram import Bot

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
BOT_TOKEN = "8275504974:AAEJblNngby0n-XEEUNn0nVe4y_BxAVEEsw"
CHAT_ID = 921726824  # —Ç–≤–æ–π ID
BINANCE_WS_URL = "wss://stream.binance.com:9443/ws/!bookTicker"

# –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
token_avg_order_size = {}
ALPHA = 0.1  # –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
LARGE_ORDER_MULTIPLIER = 2  # –æ—Ä–¥–µ—Ä > 5x —Å—Ä–µ–¥–Ω–µ–≥–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫—Ä—É–ø–Ω—ã–º
NOT_FOUND_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥

last_large_order_time = 0

# ====== –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ======
TOKENS = [
    "SOLUSDT","ETHUSDT","BNBUSDT","ADAUSDT","XRPUSDT","DOTUSDT","MATICUSDT","LTCUSDT",
    "AVAXUSDT","LINKUSDT","ALGOUSDT","ATOMUSDT","XLMUSDT","VETUSDT","FILUSDT","TRXUSDT",
    "EOSUSDT","AAVEUSDT","UNIUSDT","SANDUSDT","GRTUSDT","THETAUSDT","EGLDUSDT","FTTUSDT",
    "NEARUSDT","CHZUSDT","KSMUSDT","CAKEUSDT","BTTUSDT","HBARUSDT","MANAUSDT","ENJUSDT",
    "ONEUSDT","HOTUSDT","ZILUSDT","WAVESUSDT","LRCUSDT","QTUMUSDT","XEMUSDT","IOTAUSDT",
    "MKRUSDT","COMPUSDT","SNXUSDT","YFIUSDT","BALUSDT","CRVUSDT","1INCHUSDT","OCEANUSDT",
    "RUNEUSDT","KAVAUSDT","CELOUSDT","ARUSDT","STMXUSDT","ANKRUSDT"
]

bot = Bot(token=BOT_TOKEN)

# ====== –§—É–Ω–∫—Ü–∏–∏ ======
def update_avg_order(symbol, size):
    if symbol not in token_avg_order_size:
        token_avg_order_size[symbol] = size
    else:
        token_avg_order_size[symbol] = (1 - ALPHA) * token_avg_order_size[symbol] + ALPHA * size

def is_large_order(symbol, size):
    avg = token_avg_order_size.get(symbol, size)
    return size >= avg * LARGE_ORDER_MULTIPLIER

async def notify_large_order(symbol, side, size, price):
    global last_large_order_time
    last_large_order_time = asyncio.get_event_loop().time()
    usd_value = size * price
    msg = f"üî• –ë–æ–ª—å—à–æ–π –æ—Ä–¥–µ—Ä!\n–¢–æ–∫–µ–Ω: {symbol}\n–°—Ç–æ—Ä–æ–Ω–∞: {side}\n–û–±—ä–µ–º: {size}\n–¶–µ–Ω–∞: {price}\n–ü—Ä–∏–º–µ—Ä–Ω–∞—è $-—Å—Ç–æ–∏–º–æ—Å—Ç—å: {usd_value:.2f}$"
    await bot.send_message(chat_id=CHAT_ID, text=msg)

async def notify_not_found():
    msg_lines = ["–ü–æ–∫–∞ –∫—Ä—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –¢–µ–∫—É—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–º—ã:"]
    for token in TOKENS:
        avg = token_avg_order_size.get(token, 0)
        msg_lines.append(f"{token}: {avg:.4f}")
    msg = "\n".join(msg_lines)
    await bot.send_message(chat_id=CHAT_ID, text=msg)

# ====== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ======
async def main():
    global last_large_order_time
    async with websockets.connect(BINANCE_WS_URL) as ws:
        while True:
            try:
                msg = await asyncio.wait_for(ws.recv(), timeout=NOT_FOUND_TIMEOUT)
                data = json.loads(msg)

                symbol = data["s"]
                if symbol not in TOKENS:
                    continue  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –≤–Ω–µ —Å–ø–∏—Å–∫–∞

                bid_price = float(data["b"])
                ask_price = float(data["a"])
                bid_size = float(data["B"])
                ask_size = float(data["A"])

                # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                update_avg_order(symbol, bid_size)
                update_avg_order(symbol, ask_size)

                # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä—É–ø–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
                if is_large_order(symbol, bid_size):
                    await notify_large_order(symbol, "BUY", bid_size, bid_price)
                elif is_large_order(symbol, ask_size):
                    await notify_large_order(symbol, "SELL", ask_size, ask_price)

                # –ø–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞–∫–∞–Ω –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ª–æ–≥–æ–≤
                print(json.dumps(data, indent=2))

            except asyncio.TimeoutError:
                # –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –±–æ–ª—å—à–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ NOT_FOUND_TIMEOUT —Å–µ–∫—É–Ω–¥
                if asyncio.get_event_loop().time() - last_large_order_time >= NOT_FOUND_TIMEOUT:
                    await notify_not_found()
                    last_large_order_time = asyncio.get_event_loop().time()

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    asyncio.run(main())