# detector.py
import os
import json
import asyncio
import websockets
from dotenv import load_dotenv
from notifier import log_info

load_dotenv()

BINANCE_SYMBOLS = os.getenv("BINANCE_SYMBOLS", "vetusdt,trbusdt,adausdt").split(",")
DEPTH_LEVEL = int(os.getenv("DEPTH_LEVEL", 10))

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
MIN_RELATIVE_DEPTH = float(os.getenv("MIN_RELATIVE_DEPTH", 0.3))
MIN_ABS_VOLUME = float(os.getenv("MIN_ABS_VOLUME", 10000))
MIN_HOLD_TIME = float(os.getenv("MIN_HOLD_TIME", 2))
CANCEL_RATE_THRESHOLD = float(os.getenv("CANCEL_RATE_THRESHOLD", 0.6))
MIN_CONFIDENCE = float(os.getenv("MIN_CONFIDENCE", 0.75))


async def whales_detector():
    streams = "/".join([f"{s}@depth{DEPTH_LEVEL}" for s in BINANCE_SYMBOLS])
    url = f"wss://fstream.binance.com/stream?streams={streams}"

    await log_info("‚úÖ Detector –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance...")

    first_run_results = []  # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

    while True:
        try:
            async with websockets.connect(url, ping_interval=20, ping_timeout=10) as ws:
                await log_info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ñ–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤...")

                async for message in ws:
                    try:
                        data = json.loads(message)
                        symbol = data["stream"].split("@")[0].upper()
                        orderbook = data["data"]

                        bids = orderbook.get("b", [])[:DEPTH_LEVEL]
                        asks = orderbook.get("a", [])[:DEPTH_LEVEL]

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2 —Ç–æ–∫–µ–Ω–æ–≤
                        if symbol.lower() in BINANCE_SYMBOLS[:2]:
                            for b in bids:
                                price, volume = float(b[0]), float(b[1])
                                total_bid_volume = sum(float(bi[1]) for bi in bids)
                                rel_depth = volume / total_bid_volume if total_bid_volume > 0 else 0
                                if volume >= MIN_ABS_VOLUME and rel_depth >= MIN_RELATIVE_DEPTH:
                                    confidence = rel_depth
                                    if confidence >= MIN_CONFIDENCE:
                                        first_run_results.append(
                                            f"üö® LONG {symbol} | Price: {price} | Vol: {volume} | RelDepth: {rel_depth:.2f} | Conf: {confidence:.2f}"
                                        )
                            for a in asks:
                                price, volume = float(a[0]), float(a[1])
                                total_ask_volume = sum(float(ai[1]) for ai in asks)
                                rel_depth = volume / total_ask_volume if total_ask_volume > 0 else 0
                                if volume >= MIN_ABS_VOLUME and rel_depth >= MIN_RELATIVE_DEPTH:
                                    confidence = rel_depth
                                    if confidence >= MIN_CONFIDENCE:
                                        first_run_results.append(
                                            f"üö® SHORT {symbol} | Price: {price} | Vol: {volume} | RelDepth: {rel_depth:.2f} | Conf: {confidence:.2f}"
                                        )

                            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –∏—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥
                            if first_run_results:
                                await log_info("üìä –ò—Ç–æ–≥–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:\n" + "\n".join(first_run_results))
                                first_run_results = []  # –æ—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ

                        # –î–∞–ª–µ–µ –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç—å pass)
                        # ...

                        await asyncio.sleep(0.1)

                    except Exception as e:
                        await log_info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                        await asyncio.sleep(1)

        except (websockets.exceptions.ConnectionClosedError,
                websockets.exceptions.ConnectionClosedOK,
                asyncio.TimeoutError) as e:
            await log_info(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            await asyncio.sleep(5)