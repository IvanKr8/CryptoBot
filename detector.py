# detector.py
import os
import json
import asyncio
import websockets
from dotenv import load_dotenv
from notifier import log_info

load_dotenv()

BINANCE_SYMBOLS = os.getenv("BINANCE_SYMBOLS", "vetusdt,trbusdt").split(",")
DEPTH_LEVEL = int(os.getenv("DEPTH_LEVEL", 10))

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
MIN_RELATIVE_DEPTH = float(os.getenv("MIN_RELATIVE_DEPTH", 0.3))
MIN_ABS_VOLUME = float(os.getenv("MIN_ABS_VOLUME", 10000))
MIN_HOLD_TIME = float(os.getenv("MIN_HOLD_TIME", 2))
CANCEL_RATE_THRESHOLD = float(os.getenv("CANCEL_RATE_THRESHOLD", 0.6))

# Confidence
MIN_CONFIDENCE = float(os.getenv("MIN_CONFIDENCE", 0.75))


# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—à–ª—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å hold_time –∏ cancel_rate
level_cache = {}  # {symbol: {price_level: {"volume": float, "hold_time": float, "last_update": timestamp}}}


async def whales_detector():
    streams = "/".join([f"{s}@depth{DEPTH_LEVEL}" for s in BINANCE_SYMBOLS])
    url = f"wss://fstream.binance.com/stream?streams={streams}"

    await log_info("‚úÖ Detector –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance...")

    while True:
        try:
            async with websockets.connect(url, ping_interval=20, ping_timeout=10) as ws:
                await log_info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ñ–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤...")
                async for message in ws:
                    try:
                        data = json.loads(message)
                        symbol = data["stream"].split("@")[0].upper()
                        orderbook = data["data"]

                        bids = orderbook.get("b", [])[:DEPTH_LEVEL]
                        asks = orderbook.get("a", [])[:DEPTH_LEVEL]

                        # –°—á–∏—Ç–∞–µ–º –≤–∏–¥–∏–º—É—é –≥–ª—É–±–∏–Ω—É
                        total_bid_volume = sum(float(b[1]) for b in bids)
                        total_ask_volume = sum(float(a[1]) for a in asks)

                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞ bids
                        for b in bids:
                            price, volume = float(b[0]), float(b[1])
                            rel_depth = volume / total_bid_volume if total_bid_volume > 0 else 0

                            if volume < MIN_ABS_VOLUME or rel_depth < MIN_RELATIVE_DEPTH:
                                continue  # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –º–µ–ª–∫–∏–µ –∏ —Å–ª–∞–±—ã–µ —É—Ä–æ–≤–Ω–∏

                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å hold_time/cancel_rate –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ
                            confidence = rel_depth  # –ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø–æ–∫–∞

                            if confidence >= MIN_CONFIDENCE:
                                text = (
                                    f"üö® –°–∏–≥–Ω–∞–ª LONG –¥–ª—è {symbol}\n"
                                    f"–¶–µ–Ω–∞ —É—Ä–æ–≤–Ω—è: {price}\n"
                                    f"–û–±—ä–µ–º: {volume}\n"
                                    f"Relative Depth: {rel_depth:.2f}\n"
                                    f"Confidence: {confidence:.2f}"
                                )
                                await log_info(text)

                        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º asks –¥–ª—è SHORT
                        for a in asks:
                            price, volume = float(a[0]), float(a[1])
                            rel_depth = volume / total_ask_volume if total_ask_volume > 0 else 0

                            if volume < MIN_ABS_VOLUME or rel_depth < MIN_RELATIVE_DEPTH:
                                continue

                            confidence = rel_depth
                            if confidence >= MIN_CONFIDENCE:
                                text = (
                                    f"üö® –°–∏–≥–Ω–∞–ª SHORT –¥–ª—è {symbol}\n"
                                    f"–¶–µ–Ω–∞ —É—Ä–æ–≤–Ω—è: {price}\n"
                                    f"–û–±—ä–µ–º: {volume}\n"
                                    f"Relative Depth: {rel_depth:.2f}\n"
                                    f"Confidence: {confidence:.2f}"
                                )
                                await log_info(text)

                        await asyncio.sleep(0.1)

                    except Exception as e:
                        await log_info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                        await asyncio.sleep(1)

        except (websockets.exceptions.ConnectionClosedError,
                websockets.exceptions.ConnectionClosedOK,
                asyncio.TimeoutError) as e:
            await log_info(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            await asyncio.sleep(5)