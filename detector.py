from dotenv import load_dotenv
import os
import websockets
import asyncio

load_dotenv()

BINANCE_SYMBOLS = os.getenv("BINANCE_SYMBOLS", "vetusdt,trbusdt").split(",")
DEPTH_LEVEL = os.getenv("DEPTH_LEVEL", 10)

async def whales_detector():
    streams = "/".join([f"{s}@depth{DEPTH_LEVEL}" for s in BINANCE_SYMBOLS])
    url = f"wss://fstream.binance.com/stream?streams={streams}"

    await log_info("‚úÖ Detector –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance...")

    async with websockets.connect(url) as ws:
        await log_info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ñ–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤...")
        async for message in ws:
            try:
                data = json.loads(message)
                symbol = data["stream"].split("@")[0].upper()
                orderbook = data["data"]

                bids = orderbook["bids"]
                asks = orderbook["asks"]

                text = (
                    f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}\n"
                    f"üîµ –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: {bids[0]}\n"
                    f"üî¥ –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: {asks[0]}"
                )

                await log_info(text)
                await asyncio.sleep(0.2)  # —á—É—Ç—å –∑–∞–º–µ–¥–ª—è–µ–º, —á—Ç–æ–±—ã Telegram –Ω–µ –¥—É—à–∏–ª—Å—è

            except Exception as e:
                await log_info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(1)

    