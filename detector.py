import asyncio
import websockets
import json
from notifier import log_info
from dotenv import load_dotenv
import os

load_dotenv()

BINANCE_SYMBOLS = os.getenv("BINANCE_SYMBOLS", "vetusdt,trbusdt").split(",")
DEPTH_LEVEL = os.getenv("DEPTH_LEVEL", 10)

async def whales_detector():
    await log_info(BINANCE_SYMBOLS")
    streams = "/".join([f"{s}@depth20" for s in BINANCE_SYMBOLS])
    url = f"wss://fstream.binance.com/stream?streams={streams}"

    await log_info("‚úÖ Detector –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance...")

    while True:  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        try:
            async with websockets.connect(url, ping_interval=20, ping_timeout=10) as ws:
                await log_info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ñ–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–æ–≤...")
                async for message in ws:
                    try:
                        data = json.loads(message)
                        symbol = data["stream"].split("@")[0].upper()
                        orderbook = data["data"]

                        bids = orderbook.get("b", [])
                        asks = orderbook.get("a", [])

                        if bids and asks:
                            text = (
                                f"üìà {symbol} ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞\n"
                                f"üîµ –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: {bids[0]}\n"
                                f"üî¥ –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: {asks[0]}"
                            )
                            await log_info(text)

                        await asyncio.sleep(0.1)

                    except Exception as e:
                        await log_info(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
                        await asyncio.sleep(1)

        except (websockets.exceptions.ConnectionClosedError,
                websockets.exceptions.ConnectionClosedOK,
                asyncio.TimeoutError) as e:
            await log_info(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            await asyncio.sleep(5)